import React, { useState, useEffect } from 'react';
import * as encryption from './encryption';
import QRScanner from './components/QRScanner.bak';
import WelcomeScreen from './components/WelcomeScreen';
import ChooseMethodScreen from './components/ChooseMethodScreen';
import QRSetupScreen from './components/QRSetupScreen';
import CodeSetupScreen from './components/CodeSetupScreen';
import ChatScreen from './components/ChatScreen';
import { useEncryption } from './hooks/useEncryption';
import { useMessages } from './hooks/useMessages';

// Note: Import Firebase config when ready
// import { db } from './firebase';

export default function TogetherChat() {
  const [userName, setUserName] = useState('');
  const [sharedCode, setSharedCode] = useState('');
  const [isConnected, setIsConnected] = useState(false);
  const [step, setStep] = useState('welcome');
  const [showQRScanner, setShowQRScanner] = useState(false);
  const [qrScanMode, setQrScanMode] = useState(null);
  const [encryptionStatus, setEncryptionStatus] = useState('Not encrypted');

  // Use custom hooks
  const encryption = useEncryption();
  const { messages, addMessage } = useMessages(
    encryption.sharedSecret,
    encryption.encryptMessage,
    encryption.decryptMessage,
    encryption.encryptFile
  );

  // ADD THIS DEBUG
  useEffect(() => {
    console.log('showQRScanner changed to:', showQRScanner);
  }, [showQRScanner]);
  
  useEffect(() => {
    console.log('step changed to:', step);
  }, [step]);
  // END DEBUG

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    const savedUserName = localStorage.getItem('togetherUserName');
    const savedMyKeys = localStorage.getItem('togetherMyKeys');
    const savedTheirPublicKey = localStorage.getItem('togetherTheirPublicKey');
    const savedSharedSecret = localStorage.getItem('togetherSharedSecret');
    const savedMethod = localStorage.getItem('togetherKeyMethod');
    
    if (savedUserName && savedMyKeys && savedSharedSecret) {
      setUserName(savedUserName);
      setMyKeys(JSON.parse(savedMyKeys));
      setTheirPublicKey(savedTheirPublicKey);
      setSharedSecret(savedSharedSecret);
      setKeyExchangeMethod(savedMethod);
      setIsConnected(true);
      setStep('chat');
      setEncryptionStatus('🔒 E2E Encrypted');
      loadMessages();
    }
  }, []);

  useEffect(() => {
    return () => {
      if (previewUrl) {
        URL.revokeObjectURL(previewUrl);
      }
    };
  }, [previewUrl]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const loadMessages = () => {
    const savedMessages = localStorage.getItem('togetherMessages');
    if (savedMessages) {
      const encrypted = JSON.parse(savedMessages);
      // Decrypt messages
      const decrypted = encrypted.map(msg => {
        if (msg.encrypted && sharedSecret) {
          try {
            const decryptedText = encryption.decryptMessage(
              { ciphertext: msg.text, nonce: msg.nonce },
              sharedSecret
            );
            return { ...msg, text: decryptedText, decrypted: true };
          } catch (e) {
            return { ...msg, text: '[Decryption failed]', decrypted: false };
          }
        }
        return msg;
      });
      setMessages(decrypted);
    }
  };

  const saveMessages = (msgs) => {
    localStorage.setItem('togetherMessages', JSON.stringify(msgs));
  };

  // Generate keys for QR method
  const generateQRKeys = () => {
    const keys = encryption.generateKeyPair();
    setMyKeys(keys);
    const qrData = encryption.generateQRData(keys.publicKey);
    setQrCodeData(qrData);
    return keys;
  };

  // Handle QR scan
  const handleQRScan = (scannedData) => {
    const parsed = encryption.parseQRData(scannedData);
    if (!parsed) {
      alert('Invalid QR code format');
      return false;
    }
    
    setTheirPublicKey(parsed.pk);
    
    // Generate shared secret
    const secret = encryption.generateSharedSecret(myKeys.secretKey, parsed.pk);
    setSharedSecret(secret);
    
    return true;
  };

  // Setup with shared code
  const handleSetupWithCode = async () => {
    if (userName.trim() && sharedCode.trim()) {
      if (sharedCode.length < 8) {
        alert('Shared code must be at least 8 characters for security');
        return;
      }
      
      try {
        // Derive deterministic keys from shared code
        const keys = await encryption.deriveKeyPairFromCode(sharedCode);
        setMyKeys(keys);
        
        // For shared code method, both users have same keys
        // So we use the public key as "their" public key
        setTheirPublicKey(keys.publicKey);
        
        // Generate shared secret
        const secret = encryption.generateSharedSecret(keys.secretKey, keys.publicKey);
        setSharedSecret(secret);
        
        // Save to localStorage
        localStorage.setItem('togetherUserName', userName);
        localStorage.setItem('togetherMyKeys', JSON.stringify(keys));
        localStorage.setItem('togetherTheirPublicKey', keys.publicKey);
        localStorage.setItem('togetherSharedSecret', secret);
        localStorage.setItem('togetherKeyMethod', 'code');
        
        setKeyExchangeMethod('code');
        setIsConnected(true);
        setStep('chat');
        setEncryptionStatus('🔒 E2E Encrypted');
        loadMessages();
      } catch (error) {
        alert('Error setting up encryption: ' + error.message);
      }
    }
  };

  // Setup with QR - Generate
  const handleSetupWithQRGenerate = () => {
    if (!userName.trim()) {
      alert('Please enter your name first');
      return;
    }
    
    const keys = generateQRKeys();
    localStorage.setItem('togetherUserName', userName);
    localStorage.setItem('togetherMyKeys', JSON.stringify(keys));
    localStorage.setItem('togetherKeyMethod', 'qr');
    
    // Show QR and wait for partner to scan and send their key
    setStep('qr-waiting');
  };

  // Setup with QR - Scan
  const handleSetupWithQRScan = () => {
    console.log('=== handleSetupWithQRScan called ===');
    
    if (!userName.trim()) {
      console.log('No username, showing alert');
      alert('Please enter your name first');
      return;
    }
    
    console.log('Generating keys...');
    // Generate my keys first
    const keys = encryption.generateKeyPair();
    setMyKeys(keys);
    console.log('Keys generated:', keys);
    
    console.log('Opening QR scanner...');
    // Show QR scanner
    setShowQRScanner(true);
    setQrScanMode('scan-first');
    console.log('showQRScanner set to true');
  };

  // Handle successful QR scan
  const handleQRScanSuccess = (scannedText) => {
    console.log('QR scanned:', scannedText);
    
    const parsed = encryption.parseQRData(scannedText);
    
    if (!parsed) {
      alert('Invalid QR code format');
      setShowQRScanner(false);
      return;
    }
    
    setTheirPublicKey(parsed.pk);
    
    // Generate shared secret
    const secret = encryption.generateSharedSecret(myKeys.secretKey, parsed.pk);
    setSharedSecret(secret);
    
    // Save keys
    localStorage.setItem('togetherUserName', userName);
    localStorage.setItem('togetherMyKeys', JSON.stringify(myKeys));
    localStorage.setItem('togetherTheirPublicKey', parsed.pk);
    localStorage.setItem('togetherSharedSecret', secret);
    localStorage.setItem('togetherKeyMethod', 'qr');
    
    setKeyExchangeMethod('qr');
    setShowQRScanner(false);
    
    // Now show MY QR code for them to scan
    const myQrData = encryption.generateQRData(myKeys.publicKey);
    setQrCodeData(myQrData);
    setStep('qr-show-mine');
  };

  const handleDisconnect = () => {
    if (confirm('Disconnect? Your encrypted messages will remain on this device.')) {
      localStorage.removeItem('togetherUserName');
      localStorage.removeItem('togetherMyKeys');
      localStorage.removeItem('togetherTheirPublicKey');
      localStorage.removeItem('togetherSharedSecret');
      localStorage.removeItem('togetherKeyMethod');
      setIsConnected(false);
      setStep('welcome');
      setUserName('');
      setSharedCode('');
      setMyKeys(null);
      setTheirPublicKey(null);
      setSharedSecret(null);
      setEncryptionStatus('Not encrypted');
    }
  };

  const handleFileSelect = (e) => {
    const file = e.target.files[0];
    if (file) {
      const maxSize = 10 * 1024 * 1024;
      
      if (file.size > maxSize) {
        alert('File size should be less than 10MB');
        return;
      }

      setSelectedFile(file);
      
      if (file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onloadend = () => {
          setPreviewUrl(reader.result);
        };
        reader.readAsDataURL(file);
      } else {
        setPreviewUrl(null);
      }
    }
  };

  const removeFile = () => {
    setSelectedFile(null);
    setPreviewUrl(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const sendMessage = async () => {
    if (!sharedSecret) {
      alert('Encryption not set up!');
      return;
    }

    if (inputText.trim() || selectedFile) {
      const newMessage = {
        id: Date.now(),
        sender: userName,
        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
        date: new Date().toLocaleDateString(),
        encrypted: true,
        synced: false
      };

      // Encrypt text message
      if (inputText.trim()) {
        const encrypted = encryption.encryptMessage(inputText, sharedSecret);
        newMessage.text = encrypted.ciphertext;
        newMessage.nonce = encrypted.nonce;
      }

      // Handle file
      if (selectedFile) {
        const isLargeFile = selectedFile.size > 1024 * 1024;
        
        newMessage.file = {
          name: selectedFile.name,
          type: selectedFile.type,
          size: selectedFile.size,
          storage: isLargeFile ? 'indexedDB' : 'firestore',
          encrypted: true
        };

        const reader = new FileReader();
        reader.onloadend = () => {
          const base64Data = reader.result.split(',')[1];
          
          // Encrypt file
          const encryptedFile = encryption.encryptFile(base64Data, sharedSecret);
          newMessage.file.data = encryptedFile.ciphertext;
          newMessage.file.nonce = encryptedFile.nonce;
          
          if (isLargeFile) {
            newMessage.file.localOnly = true;
            console.log('Large file encrypted - will store in IndexedDB');
          }
          
          // Save encrypted message
          const updatedMessages = [...messages, newMessage];
          setMessages(updatedMessages);
          saveMessages(updatedMessages);
        };
        reader.readAsDataURL(selectedFile);
      } else {
        // Save encrypted message
        const updatedMessages = [...messages, newMessage];
        setMessages(updatedMessages);
        saveMessages(updatedMessages);
      }

      setInputText('');
      removeFile();
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && step === 'chat' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const addEmoji = (emoji) => {
    setInputText(inputText + emoji);
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
    alert('Copied to clipboard! Share with your partner.');
  };

  // Decrypt message for display
  const decryptMessageForDisplay = (msg) => {
    if (!msg.encrypted || !sharedSecret) return msg.text;
    
    try {
      const decrypted = encryption.decryptMessage(
        { ciphertext: msg.text, nonce: msg.nonce },
        sharedSecret
      );
      return decrypted || '[Decryption failed]';
    } catch (e) {
      return '[Decryption failed]';
    }
  };

  // Decrypt file for display
  const decryptFileForDisplay = (file) => {
    if (!file.encrypted || !sharedSecret) return file.data;
    
    try {
      const decrypted = encryption.decryptFile(
        { ciphertext: file.data, nonce: file.nonce },
        sharedSecret
      );
      return 'data:' + file.type + ';base64,' + decrypted;
    } catch (e) {
      return null;
    }
  };

  // Welcome Screen
  if (step === 'welcome') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-pink-100 via-purple-50 to-pink-100 flex items-center justify-center p-4">
        {/* QR Scanner Modal */}
        {showQRScanner && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <QRScanner
              onScan={handleQRScanSuccess}
              onClose={() => setShowQRScanner(false)}
            />
          </div>
        )}

        <div className="bg-white rounded-3xl shadow-2xl p-8 w-full max-w-md">
          <div className="text-center mb-8">
            <Heart className="w-20 h-20 text-pink-500 mx-auto mb-4 animate-pulse" fill="currentColor" />
            <h1 className="text-4xl font-bold text-gray-800 mb-2">Together</h1>
            <p className="text-gray-600 mb-2">Private chat for couples</p>
            <div className="flex items-center justify-center gap-2 text-sm text-green-600 bg-green-50 px-4 py-2 rounded-full inline-flex">
              <Shield className="w-4 h-4" />
              <span>End-to-end encrypted with TweetNaCl</span>
            </div>
          </div>

          <div className="space-y-4 mb-6">
            <div className="bg-pink-50 p-4 rounded-xl">
              <h3 className="font-semibold text-gray-800 mb-2 flex items-center gap-2">
                <Lock className="w-5 h-5" />
                Military-grade encryption:
              </h3>
              <ul className="text-sm text-gray-600 space-y-1">
                <li>✓ XSalsa20-Poly1305 cipher</li>
                <li>✓ X25519 key exchange</li>
                <li>✓ Perfect Forward Secrecy</li>
                <li>✓ Zero-knowledge architecture</li>
              </ul>
            </div>

            <div className="bg-purple-50 p-4 rounded-xl">
              <h3 className="font-semibold text-gray-800 mb-2">✨ Features:</h3>
              <ul className="text-sm text-gray-600 space-y-1">
                <li>• Messages encrypted before leaving device</li>
                <li>• Photos encrypted in cloud</li>
                <li>• Videos stored locally (encrypted)</li>
                <li>• No one can read your messages</li>
              </ul>
            </div>
          </div>

          <button
            onClick={() => setStep('choose-method')}
            className="w-full bg-gradient-to-r from-pink-500 to-purple-500 text-white py-3 rounded-xl font-semibold hover:from-pink-600 hover:to-purple-600 transition"
          >
            Get Started
          </button>
        </div>
      </div>
    );
  }

  // Choose Key Exchange Method
  if (step === 'choose-method') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-pink-100 via-purple-50 to-pink-100 flex items-center justify-center p-4">
        {/* QR Scanner Modal */}
        {showQRScanner && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <QRScanner
              onScan={handleQRScanSuccess}
              onClose={() => setShowQRScanner(false)}
            />
          </div>
        )}

        <div className="bg-white rounded-3xl shadow-2xl p-8 w-full max-w-md">
          <div className="text-center mb-8">
            <Shield className="w-16 h-16 text-pink-500 mx-auto mb-4" />
            <h2 className="text-2xl font-bold text-gray-800 mb-2">Choose Setup Method</h2>
            <p className="text-gray-600 text-sm">How do you want to exchange encryption keys?</p>
          </div>

          <div className="space-y-4">
            <button
              onClick={() => {
                setKeyExchangeMethod('qr');
                setStep('qr-setup');
              }}
              className="w-full p-6 border-2 border-pink-200 rounded-xl hover:border-pink-400 hover:bg-pink-50 transition text-left"
            >
              <div className="flex items-start gap-4">
                <QrCode className="w-8 h-8 text-pink-500 flex-shrink-0 mt-1" />
                <div>
                  <h3 className="font-semibold text-gray-800 mb-1">QR Code (Most Secure)</h3>
                  <p className="text-sm text-gray-600 mb-2">Perfect Forward Secrecy</p>
                  <ul className="text-xs text-gray-500 space-y-1">
                    <li>✓ Unique keys per session</li>
                    <li>✓ One shows QR, other scans</li>
                    <li>✓ Like Signal/WhatsApp</li>
                  </ul>
                </div>
              </div>
            </button>

            <button
              onClick={() => {
                setKeyExchangeMethod('code');
                setStep('code-setup');
              }}
              className="w-full p-6 border-2 border-purple-200 rounded-xl hover:border-purple-400 hover:bg-purple-50 transition text-left"
            >
              <div className="flex items-start gap-4">
                <Key className="w-8 h-8 text-purple-500 flex-shrink-0 mt-1" />
                <div>
                  <h3 className="font-semibold text-gray-800 mb-1">Shared Secret Code</h3>
                  <p className="text-sm text-gray-600 mb-2">Simple - Both enter same code</p>
                  <ul className="text-xs text-gray-500 space-y-1">
                    <li>✓ Easy remote setup</li>
                    <li>✓ Deterministic keys</li>
                    <li>✓ Still fully encrypted</li>
                  </ul>
                </div>
              </div>
            </button>
          </div>

          <button
            onClick={() => setStep('welcome')}
            className="w-full mt-6 bg-gray-200 text-gray-700 py-3 rounded-xl font-semibold hover:bg-gray-300 transition"
          >
            Back
          </button>
        </div>
      </div>
    );
  }

  // QR Setup
  if (step === 'qr-setup') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-pink-100 via-purple-50 to-pink-100 flex items-center justify-center p-4">
        {/* QR Scanner Modal */}
        {showQRScanner && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <QRScanner
              onScan={handleQRScanSuccess}
              onClose={() => setShowQRScanner(false)}
            />
          </div>
        )}

        <div className="bg-white rounded-3xl shadow-2xl p-8 w-full max-w-md">
          <div className="text-center mb-8">
            <QrCode className="w-16 h-16 text-pink-500 mx-auto mb-4" />
            <h2 className="text-2xl font-bold text-gray-800 mb-2">QR Code Setup</h2>
            <p className="text-gray-600 text-sm">One generates, the other scans</p>
          </div>

          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Your Name
            </label>
            <input
              type="text"
              placeholder="Enter your name"
              value={userName}
              onChange={(e) => setUserName(e.target.value)}
              className="w-full px-4 py-3 border-2 border-pink-200 rounded-xl focus:outline-none focus:border-pink-400"
            />
          </div>

          <div className="space-y-3">
            <button
              onClick={handleSetupWithQRGenerate}
              className="w-full bg-gradient-to-r from-pink-500 to-purple-500 text-white py-3 rounded-xl font-semibold hover:from-pink-600 hover:to-purple-600 transition"
            >
              Generate QR Code
            </button>

            <button
              onClick={handleSetupWithQRScan}
              className="w-full bg-green-500 text-white py-3 rounded-xl font-semibold hover:bg-green-600 transition"
            >
              Scan Partner's QR Code
            </button>

            <button
              onClick={() => setStep('choose-method')}
              className="w-full bg-gray-200 text-gray-700 py-3 rounded-xl font-semibold hover:bg-gray-300 transition"
            >
              Back
            </button>
          </div>
        </div>
      </div>
    );
  }

  // QR Waiting (after generating)
  if (step === 'qr-waiting') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-pink-100 via-purple-50 to-pink-100 flex items-center justify-center p-4">
        {/* QR Scanner Modal */}
        {showQRScanner && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <QRScanner
              onScan={handleQRScanSuccess}
              onClose={() => setShowQRScanner(false)}
            />
          </div>
        )}

        <div className="bg-white rounded-3xl shadow-2xl p-8 w-full max-w-md">
          <div className="text-center mb-8">
            <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
            <h2 className="text-2xl font-bold text-gray-800 mb-2">Your QR Code</h2>
            <p className="text-gray-600 text-sm">Show this to your partner to scan</p>
          </div>

          {qrCodeData && (
            <div className="bg-gray-100 p-6 rounded-xl mb-6">
              <div className="flex justify-center mb-4">
                <QRCodeDisplay data={qrCodeData} size={256} />
              </div>
              <button
                onClick={() => copyToClipboard(qrCodeData)}
                className="w-full mt-3 bg-blue-500 text-white py-2 rounded-lg text-sm hover:bg-blue-600"
              >
                Copy QR Data (Backup)
              </button>
            </div>
          )}

          <div className="mb-4 text-sm text-gray-600 bg-yellow-50 p-3 rounded-lg">
            <p>⏳ <strong>Next step:</strong> Wait for your partner to scan this QR code, then they'll show you their QR to scan.</p>
          </div>

          <button
            onClick={() => {
              setShowQRScanner(true);
              setQrScanMode('generate-waiting');
            }}
            className="w-full bg-gradient-to-r from-pink-500 to-purple-500 text-white py-3 rounded-xl font-semibold hover:from-pink-600 hover:to-purple-600 transition flex items-center justify-center gap-2"
          >
            <Camera className="w-5 h-5" />
            Partner Scanned? Now Scan Theirs
          </button>
        </div>
      </div>
    );
  }

  // QR Show Mine (after scanning theirs)
  if (step === 'qr-show-mine') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-pink-100 via-purple-50 to-pink-100 flex items-center justify-center p-4">
        {/* QR Scanner Modal */}
        {showQRScanner && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <QRScanner
              onScan={handleQRScanSuccess}
              onClose={() => setShowQRScanner(false)}
            />
          </div>
        )}

        <div className="bg-white rounded-3xl shadow-2xl p-8 w-full max-w-md">
          <div className="text-center mb-8">
            <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
            <h2 className="text-2xl font-bold text-gray-800 mb-2">Almost Done!</h2>
            <p className="text-gray-600 text-sm">Show YOUR QR code to your partner</p>
          </div>

          {qrCodeData && (
            <div className="bg-gray-100 p-6 rounded-xl mb-6">
              <div className="flex justify-center mb-4">
                <QRCodeDisplay data={qrCodeData} size={256} />
              </div>
              <button
                onClick={() => copyToClipboard(qrCodeData)}
                className="w-full mt-3 bg-blue-500 text-white py-2 rounded-lg text-sm hover:bg-blue-600"
              >
                Copy QR Data (Backup)
              </button>
            </div>
          )}

          <div className="mb-4 text-sm text-green-600 bg-green-50 p-3 rounded-lg">
            <p>✅ You scanned their QR code</p>
            <p>⏳ Now let them scan YOUR QR code</p>
          </div>

          <button
            onClick={() => {
              setIsConnected(true);
              setStep('chat');
              setEncryptionStatus('🔒 E2E Encrypted');
              loadMessages();
            }}
            className="w-full bg-gradient-to-r from-pink-500 to-purple-500 text-white py-3 rounded-xl font-semibold hover:from-pink-600 hover:to-purple-600 transition"
          >
            Done - Start Chatting
          </button>
        </div>
      </div>
    );
  }

  // Code Setup
  if (step === 'code-setup') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-pink-100 via-purple-50 to-pink-100 flex items-center justify-center p-4">
        <div className="bg-white rounded-3xl shadow-2xl p-8 w-full max-w-md">
          <div className="text-center mb-8">
            <Key className="w-16 h-16 text-purple-500 mx-auto mb-4" />
            <h2 className="text-2xl font-bold text-gray-800 mb-2">Shared Secret Code</h2>
            <p className="text-gray-600 text-sm">Both of you enter the same code</p>
          </div>

          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Your Name
              </label>
              <input
                type="text"
                placeholder="Enter your name"
                value={userName}
                onChange={(e) => setUserName(e.target.value)}
                className="w-full px-4 py-3 border-2 border-pink-200 rounded-xl focus:outline-none focus:border-pink-400"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Shared Secret Code
              </label>
              <input
                type="password"
                placeholder="Min 8 characters"
                value={sharedCode}
                onChange={(e) => setSharedCode(e.target.value)}
                className="w-full px-4 py-3 border-2 border-purple-200 rounded-xl focus:outline-none focus:border-purple-400"
              />
              <p className="text-xs text-gray-500 mt-2">
                💡 Choose a strong code and share it securely (in person, phone call)
              </p>
            </div>

            <div className="bg-green-50 border border-green-200 p-3 rounded-xl">
              <p className="text-xs text-green-800">
                <strong>🔐 Security:</strong> The code is used to derive encryption keys. Both of you will have matching keys for secure communication.
              </p>
            </div>
          </div>

          <div className="flex gap-3 mt-6">
            <button
              onClick={() => setStep('choose-method')}
              className="flex-1 bg-gray-200 text-gray-700 py-3 rounded-xl font-semibold hover:bg-gray-300 transition"
            >
              Back
            </button>
            <button
              onClick={handleSetupWithCode}
              className="flex-1 bg-gradient-to-r from-pink-500 to-purple-500 text-white py-3 rounded-xl font-semibold hover:from-pink-600 hover:to-purple-600 transition"
            >
              Connect
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Chat Screen
  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-100 via-purple-50 to-pink-100 flex flex-col">
      {/* QR Scanner Modal */}
      {showQRScanner && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <QRScanner
            onScan={handleQRScanSuccess}
            onClose={() => setShowQRScanner(false)}
          />
        </div>
      )}
      {/* Header */}
      <div className="bg-white shadow-md">
        <div className="max-w-4xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Heart className="w-8 h-8 text-pink-500" fill="currentColor" />
              <div>
                <h2 className="text-xl font-bold text-gray-800">Together</h2>
                <p className="text-sm text-gray-500 flex items-center gap-2">
                  <Shield className="w-3 h-3 text-green-600" />
                  <span>{encryptionStatus}</span>
                  <span className="w-2 h-2 bg-yellow-500 rounded-full"></span>
                  <span>Local only</span>
                </p>
              </div>
            </div>
            <div className="flex items-center gap-3">
              <div className="text-sm text-gray-600 bg-pink-50 px-4 py-2 rounded-full">
                {userName}
              </div>
              <button
                onClick={handleDisconnect}
                className="text-gray-500 hover:text-gray-700 text-sm"
              >
                Disconnect
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Messages Area */}
      <div className="flex-1 overflow-y-auto px-4 py-6 max-w-4xl w-full mx-auto">
        {messages.length === 0 ? (
          <div className="text-center text-gray-400 mt-20">
            <Shield className="w-16 h-16 mx-auto mb-4 opacity-50" />
            <p className="text-lg mb-2">Secure encrypted chat active!</p>
            <div className="text-xs bg-white p-4 rounded-xl inline-block text-left space-y-1">
              <p><strong>Method:</strong> {keyExchangeMethod === 'qr' ? '🔐 QR Code' : '🔑 Shared Code'}</p>
              <p><strong>Cipher:</strong> XSalsa20-Poly1305</p>
              <p><strong>Key Exchange:</strong> X25519</p>
              <p className="text-green-600 mt-2">✓ All messages encrypted on device</p>
            </div>
          </div>
        ) : (
          messages.map((msg, index) => {
            const isCurrentUser = msg.sender === userName;
            const showDate = index === 0 || messages[index - 1].date !== msg.date;
            const displayText = msg.encrypted ? decryptMessageForDisplay(msg) : msg.text;

            return (
              <div key={msg.id}>
                {showDate && (
                  <div className="text-center my-4">
                    <span className="bg-white px-4 py-1 rounded-full text-xs text-gray-500 shadow-sm">
                      {msg.date}
                    </span>
                  </div>
                )}
                <div className={`flex mb-4 ${isCurrentUser ? 'justify-end' : 'justify-start'}`}>
                  <div className={`max-w-xs lg:max-w-md`}>
                    <div className={`rounded-2xl px-4 py-3 ${
                      isCurrentUser 
                        ? 'bg-gradient-to-r from-pink-500 to-purple-500 text-white' 
                        : 'bg-white text-gray-800 shadow-md'
                    }`}>
                      <p className="text-sm font-medium mb-1 opacity-90">{msg.sender}</p>
                      
                      {msg.file && (
                        <div className="mb-2">
                          {msg.file.type.startsWith('image/') && msg.file.data ? (
                            <img 
                              src={decryptFileForDisplay(msg.file)} 
                              alt={msg.file.name}
                              className="rounded-lg max-w-full"
                            />
                          ) : (
                            <div className="text-xs opacity-75">
                              📎 {msg.file.name} {msg.file.localOnly && '(Local)'}
                            </div>
                          )}
                        </div>
                      )}
                      
                      {displayText && <p className="break-words">{displayText}</p>}
                      <div className="flex items-center justify-between mt-2">
                        <p className={`text-xs ${isCurrentUser ? 'text-pink-100' : 'text-gray-400'}`}>
                          {msg.timestamp}
                        </p>
                        <div className="flex items-center gap-1">
                          {msg.encrypted && <Lock className="w-3 h-3" />}
                          {!msg.synced && <span className="text-xs">📱</span>}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            );
          })
        )}
        <div ref={messagesEndRef} />
      </div>

      {/* Input Area */}
      <div className="bg-white border-t shadow-lg">
        <div className="max-w-4xl mx-auto px-4 py-4">
          {selectedFile && (
            <div className="mb-3 p-3 bg-pink-50 rounded-xl flex items-center justify-between">
              <div className="flex items-center gap-2">
                {previewUrl ? (
                  <img src={previewUrl} alt="Preview" className="w-12 h-12 rounded object-cover" />
                ) : (
                  <div className="w-12 h-12 bg-pink-100 rounded flex items-center justify-center">
                    📄
                  </div>
                )}
                <div className="flex-1 min-w-0">
                  <p className="text-sm font-medium text-gray-700 truncate">{selectedFile.name}</p>
                  <p className="text-xs text-gray-500">
                    {(selectedFile.size / 1024).toFixed(1)} KB • Will be encrypted
                  </p>
                </div>
              </div>
              <button
                onClick={removeFile}
                className="text-gray-500 hover:text-red-500 transition"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          )}

          <div className="flex gap-2 mb-3 overflow-x-auto pb-2">
            {emojis.map((emoji, index) => (
              <button
                key={index}
                onClick={() => addEmoji(emoji)}
                className="text-2xl hover:scale-125 transition-transform flex-shrink-0"
              >
                {emoji}
              </button>
            ))}
          </div>

          <div className="flex gap-2">
            <input
              type="file"
              ref={fileInputRef}
              onChange={handleFileSelect}
              accept="image/*,video/*,.pdf,.doc,.docx,.txt"
              className="hidden"
            />
            <button
              onClick={() => fileInputRef.current?.click()}
              className="bg-pink-100 text-pink-600 p-3 rounded-xl hover:bg-pink-200 transition"
              title="Attach file (will be encrypted)"
            >
              <Paperclip className="w-6 h-6" />
            </button>
            <input
              type="text"
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Type encrypted message..."
              className="flex-1 px-4 py-3 border-2 border-pink-200 rounded-xl focus:outline-none focus:border-pink-400"
            />
            <button
              onClick={sendMessage}
              className="bg-gradient-to-r from-pink-500 to-purple-500 text-white p-3 rounded-xl hover:from-pink-600 hover:to-purple-600 transition"
            >
              <Send className="w-6 h-6" />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
